# Created by: Melanie Hsu (bluemelodia)
# example: python main.py ../iPhone_Photo_Short C ../Sentient_Beings

from sklearn.cluster import KMeans
import matplotlib.pyplot as pyplot 
import numpy as np
import scipy
import argparse
import cv2
import os
import sys
from PIL import Image
import imghdr as I

from progressbar import AnimatedMarker, Bar, BouncingBar, Counter, ETA, \
                        FileTransferSpeed, FormatLabel, Percentage, \
                        ProgressBar, ReverseBar, RotatingMarker, \
                        SimpleProgress, Timer

# count the number of pixels belonging to each cluster
def centroidHist(clt):
	# grab number of clusters; this function returns evenly spaced values within the given interval
	numLabels = np.arange(0, len(np.unique(clt.labels_)) + 1)

	# compute a histogram of the number of pixels assigned to each cluster
	(hist, _) = np.histogram(clt.labels_, bins = numLabels)

	# normalize the histogram so it sums to one
	hist = hist.astype("float")
	hist /= hist.sum()

	return hist

# requires the histogram and list of centroids/cluster centers generated by the k-means algorithm
def plotColors(hist, centroids):
	# initialize bar chart representing the relative frequency of each color
	bar = np.zeros((50, 300, 3), dtype = "uint8") # returns a new array of given shape and type filled with 0s
	startX = 0

	# loop of % of each cluster and the cluster color
	for (percent, color) in zip(hist, centroids):
		# plot relative percentage of each cluster
		endX = startX + (percent * 300)

		# draw the percentage that the current color contributes to the image
		cv2.rectangle(bar, (int(startX), 0), (int(endX), 50), color.astype("uint8").tolist(), -1)
		startX = endX

	# return the bar chart
	return bar

def dominantColors(listDir, directory, destDir):
	# step through all files in directory
	path, dirs, files = os.walk(sys.argv[1]).next()

	# initialize the progress variables
	total = len(files)
	count = 0
	progress = 0
	faceCount = 0 # number of photos that contain faces

	# initialize the progress bar
	progress = ProgressBar(widgets=[Percentage(), Bar()], maxval=100).start()

	for imgpath in listDir:
		path = directory + "/" + imgpath

		# update progress and display it to the user
		count += 1

		if I.what(path) != None:
			imagePath = directory + "/" + imgpath

			# load the image nand convert it from BGR to RGB, enabling display with matplotlib
			image = cv2.imread(imagePath)
			image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

			# reshape the NumPy array to a list of RGB pixels
			# img.shape returns a tuple with number of rows, columns, and channels (if in color)
			image = image.reshape((image.shape[0]*image.shape[1], 3))

			# cluster the pixel intensities 
			cluster = KMeans(5)
			cluster.fit(image)

			# build a histogram of clusters, then draw a bar graph 
			# depicting the most dominant colors in the image
			hist = centroidHist(cluster)
			bar = plotColors(hist, cluster.cluster_centers_)

			# show image
			#pyplot.figure()
			#pyplot.axis("off")
			#pyplot.imshow(bar)
			#pyplot.show()
			
			scipy.misc.toimage(bar, cmin=0.0, cmax=None).save(destDir + "/" + imgpath)

			progress.update((float(count)/total)*100)
		else:
			progress.update((float(count)/total)*100)
			continue
	bar.finish()